/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/birth-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Calculate a birth chart
         * @description This endpoint calculates a birth chart for a given date, time, and location.
         *     It will give information such as: signs, houses, and aspects of the planets.
         *
         */
        get: operations["calculateBirthChart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        ZodiacSign: "Aries" | "Taurus" | "Gemini" | "Cancer" | "Leo" | "Virgo" | "Libra" | "Scorpio" | "Sagittarius" | "Capricorn" | "Aquarius" | "Pisces";
        /** @enum {string} */
        Planet: "Sun" | "Moon" | "Mercury" | "Venus" | "Mars" | "Jupiter" | "Saturn" | "Uranus" | "Neptune" | "Pluto" | "Ascendant" | "Midheaven" | "Descendant" | "Nadir" | "Chiron" | "Lilith" | "True North Node" | "True South Node";
        BirthChartSign: {
            value?: components["schemas"]["ZodiacSign"];
            degree?: number;
            cuspWarning?: components["schemas"]["ZodiacSign"] | null;
        };
        ZodiacPosition: {
            id?: number;
            name?: components["schemas"]["ZodiacSign"];
            lord?: {
                id?: number;
                name?: components["schemas"]["ZodiacSign"];
            };
        };
        HouseCusp: {
            id?: number;
            number?: number;
            cusp?: {
                longitude?: number;
                degree?: number;
                zodiac?: components["schemas"]["ZodiacPosition"];
            };
        };
        PlanetPosition: {
            id?: number;
            name?: components["schemas"]["Planet"];
            longitude?: number;
            is_retrograde?: boolean;
            degree?: number;
            zodiac?: components["schemas"]["ZodiacPosition"];
        };
        AnglePosition: {
            id?: number;
            name?: components["schemas"]["Planet"];
            longitude?: number;
            is_retrograde?: boolean;
            degree?: number;
            house_number?: number;
            zodiac?: components["schemas"]["ZodiacPosition"];
        };
        /** @enum {string} */
        AspectType: "Conjunction" | "Opposition" | "Trine" | "Square" | "Sextile" | "Quincunx" | "Semi Sextile" | "Semi Square" | "Sesquiquadrate" | "Quintile" | "Bi Quintile" | "Septile" | "Bi Septile" | "Tri Septile" | "Novile" | "Quincunx" | "Parallel" | "Contraparallel";
        Aspect: {
            planet_one?: {
                id?: number;
                name?: components["schemas"]["Planet"];
            };
            planet_two?: {
                id?: number;
                name?: components["schemas"]["Planet"];
            };
            aspect?: {
                id?: number;
                name?: components["schemas"]["AspectType"];
            };
            orb?: number;
        };
        ErrorResponse: {
            error?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    calculateBirthChart: {
        parameters: {
            query: {
                /** @description The year of birth */
                year: number;
                /** @description The month of birth. NOT zero-indexed. */
                month: number;
                /** @description The day of birth */
                day: number;
                /** @description The hour of birth */
                hour?: number;
                /** @description The minute of birth */
                minute?: number;
                /** @description The latitude of birth */
                latitude: number;
                /** @description The longitude of birth */
                longitude: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        signs?: {
                            sun?: components["schemas"]["BirthChartSign"];
                            moon?: components["schemas"]["BirthChartSign"];
                            ascendant?: components["schemas"]["BirthChartSign"];
                        };
                        houses?: components["schemas"]["HouseCusp"][];
                        planets?: components["schemas"]["PlanetPosition"][];
                        angles?: components["schemas"]["AnglePosition"][];
                        aspects?: components["schemas"]["Aspect"][];
                        declinations?: components["schemas"]["Aspect"][];
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
