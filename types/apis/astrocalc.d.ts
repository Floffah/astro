/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/birth-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Calculate a birth chart
         * @description This endpoint calculates a birth chart for a given date, time, and location. It will give information such as: signs, houses, and aspects of the planets.
         */
        get: operations["calculateBirthChart"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/daily-transits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Calculate daily transits
         * @description This endpoint calculates the transits for a given day at a given location. Useful for generating horoscopes.
         */
        get: operations["calculateDailyTransits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CalculateBirthChartResponse: {
            signs: {
                sun: components["schemas"]["ZodiacSignObject"];
                moon: components["schemas"]["ZodiacMoonSignObject"];
                ascendant: components["schemas"]["ZodiacSignObject"];
            };
            houses: components["schemas"]["HouseObject"][];
            planets: components["schemas"]["PlanetPositionObject"][];
            angles: components["schemas"]["PlanetPositionObject"][];
            aspects: components["schemas"]["AspectObject"][];
            declinations: components["schemas"]["AspectObject"][];
        };
        ZodiacSignObject: {
            value: components["schemas"]["ZodiacSign"];
            degree: number;
            cuspWarning: components["schemas"]["ZodiacSign"] | null;
        };
        /** @enum {string} */
        ZodiacSign: "Aries" | "Taurus" | "Gemini" | "Cancer" | "Leo" | "Virgo" | "Libra" | "Scorpio" | "Sagittarius" | "Capricorn" | "Aquarius" | "Pisces";
        ZodiacMoonSignObject: {
            phase: components["schemas"]["MoonPhase"];
            isVoidOfCourse: boolean;
        } & components["schemas"]["ZodiacSignObject"];
        /** @enum {string} */
        MoonPhase: "New Moon" | "Waxing Crescent" | "First Quarter" | "Waxing Gibbous" | "Full Moon" | "Waning Gibbous" | "Last Quarter" | "Waning Crescent";
        HouseObject: {
            id: number;
            number: number;
            cusp: components["schemas"]["ZodiacPositionObject"];
        };
        ZodiacPositionObject: {
            longitude: number;
            degree: number;
            zodiac: components["schemas"]["ZodiacDetailsObject"];
        };
        ZodiacDetailsObject: {
            id: number;
            name: components["schemas"]["ZodiacSign"];
            lord: {
                id: components["schemas"]["PlanetId"];
                name: components["schemas"]["Planet"];
            };
        };
        /** @enum {number} */
        PlanetId: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 15 | 100 | 103 | 104 | 105 | 107 | 108 | 109;
        /** @enum {string} */
        Planet: "Sun" | "Moon" | "Mercury" | "Venus" | "Mars" | "Jupiter" | "Saturn" | "Uranus" | "Neptune" | "Pluto" | "Chiron" | "Ascendant" | "True North Node" | "True South Node" | "Lilith" | "Nadir" | "Descendant" | "MidHeaven";
        PlanetPositionObject: {
            id: components["schemas"]["PlanetId"];
            name: components["schemas"]["Planet"];
            longitude: number;
            latitude?: number;
            isRetrograde: boolean;
            degree: number;
            houseNumber: number;
            zodiac: components["schemas"]["ZodiacDetailsObject"];
        };
        AspectObject: {
            planet1: {
                id: components["schemas"]["PlanetId"];
                name: components["schemas"]["Planet"];
                fromChart?: string;
            };
            planet2: {
                id: components["schemas"]["PlanetId"];
                name: components["schemas"]["Planet"];
                fromChart?: string;
            };
            aspect: {
                id: number;
                name: components["schemas"]["Aspect"];
            };
            orb: number;
            /** @enum {string} */
            typeOfAspect: "transit-to-natal" | "natal-to-natal" | "transit-to-transit";
        };
        /** @enum {string} */
        Aspect: "Conjunction" | "Opposition" | "Square" | "Semi Square" | "Sesquiquadrate" | "Trine" | "Sextile" | "Semi Sextile" | "Quincunx" | "Quintile" | "Bi Quintile" | "Parallel" | "Contraparallel";
        /** @description An error response. Note that 'error' can be a string, or a ZodError object. */
        ErrorResponse: {
            /** @constant */
            success: false;
            error: string | {
                issues: {
                    code: string;
                    message: string;
                    path: string[];
                }[];
            };
        };
        CalculateDailyTransitsResponse: {
            transitChart: components["schemas"]["CalculateBirthChartResponse"];
            transitNatalAspects: components["schemas"]["AspectObject"][];
            notableEvents: {
                retrogradePlanets: components["schemas"]["Planet"][];
                ingresses: components["schemas"]["IngressObject"][];
            };
        };
        IngressObject: {
            planet: components["schemas"]["Planet"];
            enteredSign: components["schemas"]["ZodiacSign"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaCalculateBirthChartResponse = components['schemas']['CalculateBirthChartResponse'];
export type SchemaZodiacSignObject = components['schemas']['ZodiacSignObject'];
export type SchemaZodiacSign = components['schemas']['ZodiacSign'];
export type SchemaZodiacMoonSignObject = components['schemas']['ZodiacMoonSignObject'];
export type SchemaMoonPhase = components['schemas']['MoonPhase'];
export type SchemaHouseObject = components['schemas']['HouseObject'];
export type SchemaZodiacPositionObject = components['schemas']['ZodiacPositionObject'];
export type SchemaZodiacDetailsObject = components['schemas']['ZodiacDetailsObject'];
export type SchemaPlanetId = components['schemas']['PlanetId'];
export type SchemaPlanet = components['schemas']['Planet'];
export type SchemaPlanetPositionObject = components['schemas']['PlanetPositionObject'];
export type SchemaAspectObject = components['schemas']['AspectObject'];
export type SchemaAspect = components['schemas']['Aspect'];
export type SchemaErrorResponse = components['schemas']['ErrorResponse'];
export type SchemaCalculateDailyTransitsResponse = components['schemas']['CalculateDailyTransitsResponse'];
export type SchemaIngressObject = components['schemas']['IngressObject'];
export type $defs = Record<string, never>;
export interface operations {
    calculateBirthChart: {
        parameters: {
            query: {
                year: number;
                month: number;
                day: number;
                hour?: number;
                minute?: number;
                latitude: number;
                longitude: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        data: components["schemas"]["CalculateBirthChartResponse"];
                    };
                };
            };
            /** @description User Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    calculateDailyTransits: {
        parameters: {
            query: {
                birthYear: number;
                birthMonth: number;
                birthDay: number;
                birthMinute?: number;
                birthHour?: number;
                birthLatitude: number;
                birthLongitude: number;
                transitYear?: number;
                transitMonth?: number;
                transitDay?: number;
                transitLatitude: number;
                transitLongitude: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                        data: components["schemas"]["CalculateDailyTransitsResponse"];
                    };
                };
            };
            /** @description User Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
